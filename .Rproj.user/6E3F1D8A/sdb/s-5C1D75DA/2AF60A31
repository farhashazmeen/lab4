{
    "collab_server" : "",
    "contents" : "#' Title\n#'\n#' @field formula formula. \n#' @field data data.frame. \n#' @field beta_hat matrix. \n#' @field y_hat matrix. \n#' @field e_hat matrix. \n#' @field df_linreg numeric. \n#' @field var_sigma_hat numeric. \n#' @field p_value matrix. \n#' @field t_value matrix. \n#' @field var_beta_hat matrix. \n#' @field data_name character. \n#'\n#' @return a value linreg.\n#' @export\n#'\n#' @examples linreg_mod <- linreg$new(Petal.Length~Sepal.Width+Sepal.Length, data=iris)\nlinreg <- setRefClass(\n  Class = \"linreg\",\n  fields = list(\n    formula = \"formula\",\n    data = \"data.frame\",\n    beta_hat = \"matrix\",\n    y_hat = \"matrix\",\n    e_hat = \"matrix\",\n    df_linreg = \"numeric\",\n    var_sigma_hat = \"numeric\",\n    p_value = \"matrix\",\n    t_value = \"matrix\",\n    var_beta_hat = \"matrix\",\n    data_name = \"character\"\n  ),\n  methods = list(\n    initialize = function(formula, data){\n      formula <<- formula\n      data <<- data\n      data_name <<- deparse(substitute(data))\n      \n      \n      # Define matrix\n      X <- model.matrix(formula, data)\n      \n      # extract the dependant variable from data set\n      dep_name <- all.vars(expr = formula)[1]\n      y <- (data[, dep_name])\n      \n      # Calculate coefficients\n      beta_hat <<- solve((t(X) %*% X)) %*% t(X) %*% y\n      \n      # find the fitted values of y using beta_hat\n      y_hat <<- X %*% beta_hat\n      \n      # find the residual values\n      e_hat <<- y - y_hat\n      \n      # degrees of freedom\n      n <- nrow(X) # number of observations\n      p <- ncol(X) # number of parameters\n      \n      df_linreg <<- n - p\n      \n      # residual variance\n      var_sigma_hat <<- as.numeric((t(e_hat) %*% e_hat) / df_linreg)\n      var_beta_hat <<- var_sigma_hat * solve((t(X) %*% X))\n      \n      #The t-values for each coefficient\n      t_value <<- beta_hat / sqrt(diag(var_beta_hat))\n      p_value <<- pt(abs(t_value), df = df_linreg,lower.tail=FALSE)\n    },\n    # Build linreg print function\n    print = function() {\n      # Print with help of a list\n      # return(\n      #     list(\n      #         Formula_call = formula,\n      #         Regression_Coefficients = beta_hat\n      #     )\n      # )\n      \n      # Print function call\n      cat(sep = \"\\n\")\n      cat(\"Call:\")\n      cat(sep = \"\\n\")\n      cat(paste(\"linreg(\", \"formula = \", formula[2], \" \", formula[1], \" \", formula[3], \", \", \"data = \", data_name, \")\", sep = \"\" ))\n      \n      cat(sep = \"\\n\")\n      cat(sep = \"\\n\")\n      cat(\"Coefficients:\")\n      \n      cat(sep = \"\\n\")\n      \n      # opt1.\n      # Print coef with named vector, causes error in testthat\n      # print_coef <- as.vector(beta_hat)\n      # names(print_coef) <- row.names(beta_hat)\n      # return(print_coef)\n      \n      # opt2.\n      # Print with cat(), error cause by too few blankspaces between output, ugly output\n      cat(row.names(beta_hat))\n      cat(sep = \"\\n\")\n      cat(beta_hat)\n      \n    },\n    \n    # Build linreg plot function\n    plot = function() {\n      library(ggplot2)\n      \n      # Build plotting theme\n      liu_blue <- \"#54D8E0\"\n      theme_liu <- theme(plot.margin = unit(c(1,1,1,1), \"cm\"), \n                         panel.background = element_rect(fill=\"white\"),\n                         panel.grid.major.y = element_blank(),\n                         panel.grid.minor.y = element_blank(),\n                         panel.grid.major.x = element_blank(),\n                         panel.grid.minor.x = element_blank(),\n                         axis.line = element_line(color= \"#58585b\", size=0.1),\n                         axis.text.x = element_text(color=\"Black\", size=\"10\"),\n                         axis.text.y = element_text(color=\"Black\", size=\"10\"),\n                         axis.title.x = element_text(color=\"Black\", size=\"10\", face=\"bold\"),\n                         axis.title.y = element_text(color=\"Black\", size=\"10\", face=\"bold\"),\n                         axis.ticks.y = element_blank(),\n                         axis.ticks.x = element_line(color = \"#58585b\", size = 0.3),\n                         plot.title = element_text(color=\"Black\", face=\"bold\", size=\"14\"),\n                         legend.position=\"bottom\", legend.title = element_blank(),\n                         legend.key = element_blank(),\n                         legend.text = element_text(color=\"Black\", size=\"10\"))\n      \n      # Build plot data\n      plot_df <- data.frame(\n        df_resid = e_hat,\n        df_fitted_values = y_hat)\n      \n      # Build plot1, Residual vs fitted values\n      p1 <-\n        ggplot(data = plot_df, aes(x = df_fitted_values, y = df_resid)) +\n        geom_point(colour = liu_blue) +\n        geom_smooth(method = \"loess\",\n                    color = \"red\",\n                    se = FALSE) +\n        geom_abline(slope = 0,\n                    intercept = 0,\n                    linetype = \"dotted\") +\n        ggtitle(\"Residual vs Fitted\") +\n        ylab(\"Residuals\") +\n        xlab(\"Fitted Values\") +\n        theme_liu\n      \n      # Build plot1, Scale Location\n      p2 <- ggplot(data = plot_df,\n                   aes(x = df_fitted_values, y = sqrt(abs((df_resid - mean(df_resid)) / sqrt(var_sigma_hat))))) +\n        geom_point(colour = liu_blue) +\n        geom_smooth(method = \"loess\",\n                    color = \"red\",\n                    se = FALSE) +\n        ggtitle(\"Scale-Location\") +\n        ylab(expression(sqrt(abs(\"Standardized Residuals\")))) +\n        xlab(\"Fitted Values\") +\n        theme_liu\n      \n      return(list(Residual_vs_Fitted = p1,\n                  Scale_Location = p2))\n    },\n    # Build linreg resid print function\n    resid = function() {\n      return((Residuals = round(e_hat, 2)))\n    },\n    # Build linreg pred print function\n    pred = function() {\n      return((Fitted_values = round(y_hat, 2)))\n    },\n    # Build linreg coef print function\n    coef = function() {\n      vector <- as.vector(beta_hat)\n      vect_names <-  rownames(beta_hat)\n      names(vector) <-  vect_names\n      return(vector)\n    },\n    # Build linreg summary print function\n    summary = function() {\n      # coef_mx <- as.matrix(cbind(\n      #     round(beta_hat, 2),\n      #     round(sqrt(diag(\n      #         var_beta_hat\n      #     )), 2),\n      #     round(t_value, 2),\n      #     round(p_value, 4)\n      # ))\n      # \n      # colnames(coef_mx) <-\n      #     c(\"Estimate\", \"Sd.Error\", \"T-value\", \"P-value\")\n      \n      coef_mx <- data.frame(\n        var = rownames(beta_hat),\n        estimate = round(beta_hat, 2),\n        std.error = round(sqrt(diag(\n          var_beta_hat\n        )), 2),\n        t_value = round(t_value, 2),\n        p_value = round(p_value, 4)\n      )\n      \n      coef_mx$var <- as.character(coef_mx$var)\n      # str(coef_mx)\n      row.names(coef_mx) <- NULL\n      \n      coef_mx <- rbind(c(\" \", \"Estimate\", \"Std. Error\", \"t value\", \"Pr(>|t|)\"), coef_mx)\n      \n      for(i in 2:nrow(coef_mx)){\n        if(coef_mx$p_value[i] == 0){\n          coef_mx$p_value[i] <- \"***\"\n        } else if(coef_mx$p_value[i] > 0 & coef_mx$p_value[i] <= 0.001){\n          coef_mx$p_value[i] <- \"**\"\n        } else if(coef_mx$p_value[i] > 0.001 & coef_mx$p_value[i] <= 0.01){\n          coef_mx$p_value[i] <- \"*\"\n        } else if(coef_mx$p_value[i] > 0.01 & coef_mx$p_value[i] <= 0.05){\n          coef_mx$p_value[i] <- \".\"\n        } else if(coef_mx$p_value[i] > 0.05 & coef_mx$p_value[i] <= 0.1){\n          coef_mx$p_value[i] <- \" \"\n        } else if(coef_mx$p_value[i] > 0.1){\n          coef_mx$p_value[i] <- \" \"\n        }\n      }\n      \n      \n      \n      for(c in 1:ncol(coef_mx)){\n        wdth <- max(nchar(as.character(coef_mx[, c])), na.rm = TRUE)\n        for(r in 1:nrow(coef_mx)){\n          coef_mx[r, c] <- format(coef_mx[r, c], width = wdth, justify = c(\"right\"))\n        }\n      }\n      \n      # return(\n      #     list(\n      #         Call = paste(\"linreg(\", \"formula = \", formula[2], \" \", formula[1], \" \", formula[3], \", \", \"data = \", data_name, \")\", sep = \"\" ),\n      #         Residuals = c(\n      #             Min = round(min(e_hat), 2),\n      #             round(quantile(e_hat, .25), 2),\n      #             Median = round(median(e_hat), 2),\n      #             round(quantile(e_hat, .75), 2),\n      #             Max = round(max(e_hat), 2)\n      #         ),\n      #         Coefficients = coef_mx,\n      #         Evaluation = c(\n      #             paste(\n      #                 \"Residual standard error: \",\n      #                 round(sqrt(var_sigma_hat), 4),\n      #                 \" on \",\n      #                 df,\n      #                 \" degrees of freedom\"\n      #             )\n      #         )\n      #     )\n      # )\n      \n      # Prints function call\n      cat(sep = \"\\n\")\n      cat(\"Call:\")\n      cat(sep = \"\\n\")\n      cat(paste(\"linreg(\", \"formula = \", formula[2], \" \", formula[1], \" \", formula[3], \", \", \"data = \", data_name, \")\", sep = \"\" ))\n      \n      \n      \n      # Print coef matrix with results and names, still causes errors.\n      cat(sep = \"\\n\")\n      cat(sep = \"\\n\")\n      cat(\"Coefficients:\")\n      cat(sep = \"\\n\")\n      #cat(format(coef_mx, width=max(nchar(coef_mx), nchar(coef_mx)), justify = c(\"right\")))\n      cat(sep = \"\\n\")\n      for(i in 1:nrow(coef_mx)){\n        cat(paste(as.character(coef_mx[i, ]),collapse = \" \"))\n        cat(sep = \"\\n\")\n      }\n      \n      # Print df\n      cat(sep = \"\\n\")\n      cat(\"Residual standard error:\", round(sqrt(var_sigma_hat), 2), \"on\", df_linreg, \"degrees of freedom\")\n    }\n  )\n)\nlinreg_mod <- linreg$new(Petal.Length~Sepal.Width+Sepal.Length,data=iris)\n\nlinreg_mod$print()\n#linreg_mod$pred()       \n#linreg_mod$resid()\n#linreg_mod$coef()\n#linreg_mod$summary()\nlinreg_mod$plot()\n",
    "created" : 1506113679187.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2096700339",
    "id" : "2AF60A31",
    "lastKnownWriteTime" : 1506348811,
    "last_content_update" : 1506348811,
    "path" : "D:/MastersLiu/Statistics/RCourseLab4R/RCourseLab44/lab4new/R/newlinreg1.R",
    "project_path" : "lab4new/R/newlinreg1.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}